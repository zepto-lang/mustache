(module "template"
  (exports
    (list "template" template)
    (list "find-substr" find-substr))

  (curry-flip (lambda (f x)
    (lambda (y) (f y x))))

  (find-substr (lambda (str sub)
    (define (internal s p i)
      (if (< (length s) (length p))
       -1
        (let ((m (substring s 0 (length p))))
          (if (string=? m p)
            i
            (internal (string:tail s) p (add1 i))))))
    (internal str sub 0)))

  (substr-in? (lambda (str sub)
    (< -1 (find-substr str sub))))

  (escape (lambda (str)
    (string:substitute
      (string:substitute
        (string:substitute
          str
          "&"
          "&amp;")
        ">"
        "&gt;")
      "<"
      "&lt;")))

  (each-occurrence (lambda (f sub str)
    (let ((first (find-substr str sub)))
      (if (or (< first 0) (string:empty? str))
        str
        (let ((new (f (substring str first (length str)))))
          (if (eq? new str)
            (++ (substring str 0 (add1 first))
                (each-occurrence f sub (substring str (add1 first) (length str))))
            (++ (substring str 0 first) (each-occurrence f sub new))))))))

  (expand (lambda (str values)
    (cond
      ((hash-map? values) (template str values))
      ((list? values)
        (if (all? hash-map? values)
          (string:join (map (curry template str) values) ""))
          (string:join (map (lambda (x) (template str (make-hash "." x))) values) ""))
      (else str))))

  (_get (lambda (values key)
    (let ((undotted (string:split key #\.)))
      (reduce (lambda (acc k) (if (hash-map? acc) (acc k) (nil))) values undotted))))

  (replace-normal (lambda (str values)
    (each-occurrence (lambda (str)
      (if (substr-in? str "}}")
        (let* ((k (substring str 2 (find-substr str "}}")))
               (v (_get values k)))
          (if (nil? v)
            str
            (string:substitute
              str
              (++ "{{" k "}}")
              (escape v))))
          str))
        "{{" str)))

  (replace-unescaped (lambda (str values)
    (each-occurrence (lambda (str)
      (if (substr-in? str "}}}")
        (let* ((k (substring str 3 (find-substr str "}}}")))
               (v (_get values k)))
          (if (nil? v)
            str
            (string:substitute
              str
              (++ "{{{" k "}}}")
              v)))
          str))
        "{{{" str)))

  (replace-section (lambda (str values)
    (each-occurrence (lambda (str)
      (if (substr-in? str "}}")
        (let* ((k (substring str 3 (find-substr str "}}")))
               (v (_get values k))
               (end-marker (++ "{{/" k "}}"))
               (section-end (find-substr str end-marker)))
          (cond
            ((< section-end 0) str)
            ((falsy? v) (substring str (+ section-end (length end-marker)) (length str)))
            (else
              (let* ((replace (substring str 0 (+ section-end (length end-marker))))
                     (to-expand (substring replace (+ (length k) 5) (- (length replace) (length end-marker)))))
                (string:substitute str replace (expand to-expand v))))))
          str))
        "{{#" str)))

  (replace-inv-section (lambda (str values)
    (each-occurrence (lambda (str)
      (if (substr-in? str "}}")
        (let* ((k (substring str 3 (find-substr str "}}")))
               (v (_get values k))
               (end-marker (++ "{{/" k "}}"))
               (section-end (find-substr str end-marker)))
          (cond
            ((< section-end 0) str)
            ((truthy? v) (substring str (+ section-end (length end-marker)) (length str)))
            (else
              (let* ((replace (substring str 0 (+ section-end (length end-marker))))
                     (with (substring replace (+ (length k) 5) (- (length replace) (length end-marker)))))
                (string:substitute str replace with)))))
          str))
        "{{^" str)))

  (replace-comment (lambda (str)
    (each-occurrence (lambda (str)
      (if (substr-in? str "}}")
        (let* ((i (find-substr str "}}")))
          (string:substitute
            str
            (substring str 0 (+ i 2))
            ""))
          str))
        "{{!" str)))

  (template (lambda (str values)
    (|>
      (delay (replace-comment str))
      (curry-flip replace-section values)
      (curry-flip replace-inv-section values)
      (curry-flip replace-unescaped values)
      (curry-flip replace-normal values)))))
